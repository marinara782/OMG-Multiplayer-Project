Use Case: User connects to game server

Primary actor:	 Player

Goal in context: Connect player to server to enable gameplay and online interactions.

Preconditions: Player has an internet connection, game (client) is installed and running, server is online and available

Trigger: Player enters the multiplayer portion of the gaming platform.

Scenario:
Player selects “connect” or somehow enters the multiplayer section.
Game client retrieves the address and connection settings
Game client attempts to establish a connection with the server
Player 1 gains access to online features
Exceptions:
Poor internet and connection is interrupted
Server unreachable. Player will be notified if the server is down.

Priority: Essential for online gameplaying.

When available: Third iteration

Frequency of use: High. Used anytime a player wishes to play against other players.

Channel to actor: OMG gaming platform

Secondary Actor: Server

Channels to secondary actors:	Server API, network connection

Open issues: High player traffic on server.













Use Case: User authenticates with server

Primary actor:	 Player

Goal in context: Verify the player’s identity and give them access to the game server

Preconditions: Player has an internet connection, player has a registered account

Trigger: Player must click the login button.

Scenario:
Player clicks the login button
Player is prompted for a username and password
Player enters a username and password
Game client sends the login request to the server
Server verifies credentials
The client receives the server’s response and the player is either granted access to the account in question or is prompted to try again.
Exceptions:
Username does not exist in the database
Username exists in the database but the password is incorrect

Priority: Essential, must be implemented to ensure a secure gaming experience

When available: Third iteration

Frequency of use: Medium. Some players may choose to stay logged out. Once a player is logged in, they will not be asked to log in again unless they close the session and reopen it.

Channel to actor: Via OMG gaming platform (requires internet connection)

Secondary actor: Authentication server

Channels to secondary actors:	Network connection

Open issues:
How many wrong password attempts should it take for a user to get locked out of their account?








Use Case: Create new game session

Primary actor:	 Player

Goal in context: Player connects to a specific game session after matchmaking or by direct invitation.

Preconditions: Player must be authenticated and connected to the game server, server is online

Trigger: Player clicks “Create New Game”

Scenario:
Player clicks “Create New Game”
Game client sends a request to the server to create a new game
Server verifies request and creates a new game
Server gives the game a unique session ID and stores it in a database
Server sends back session details to client and the game is displayed on the client’s screen

Exceptions:
Network issues. Client fails to communicate with server and prompts the user to retry.

Priority: High. Required for initiating multiplayer games.

When available: Third iteration

Frequency of use: High. Anytime a player wishes to create a game.

Channel to actor: Via OMG gaming platform

Secondary actor: Server, game logic system

Channels to secondary actors:	Network connection, database for storing session details

Open issues:
Handling ownership of the game if the player who created it disconnects















Use Case: Player joins game

Primary actor:	 Player

Goal in context: Player connects to a specific game session after matchmaking or invitation.

Preconditions:

Trigger:

Scenario:

Exceptions:

Priority:

When available: Third iteration

Frequency of use:

Channel to actor:

Secondary actor: Server, game session

Channels to secondary actors:

Open issues:
















Use Case: Disconnect

Primary actor:	 Player

Goal in context: Break the connection between the player’s game client and the server, either on purpose or due to external factors.

Preconditions: Player is connected to the server

Trigger: Player exits the multiplayer section.

Scenario:
Player exits the multiplayer section (either by logging out or clicking “single player”) OR server detects inactivity.
Client sends a disconnect request to the server
The server acknowledges the request and removes the client from the server
Gaming client returns to main menu

Exceptions:
Lost connection with network

Priority: Medium. Important for proper online gaming management.

When available: Third iteration

Frequency of use: High. Used anytime a player ends an online gaming session

Channel to actor: OMG gaming platform

Secondary Actor: Server

Channels to secondary actors:	Network connection

Open issues: Handling unexpected disconnects without data loss






















Use Case: Send and receive game moves

Primary actor:	 Player

Goal in context: Enable real-time gaming interaction between players online

Preconditions: Player 1 and player 2 are connected to the game server, game session is active, server is online.

Trigger: Player 1 makes a move on the gaming platform

Scenario:
Player 1 makes a move in the game
Game client sends the move to the server
Server updates the game state
Server sends updated game state to player 2
Player 2’s client receives the updated move and displays it

Exceptions:
Network lag / connection loss
Invalid move

Priority: Essential. Used anytime a player wants to play against another player

When available: Third iteration

Frequency of use: High. Used anytime a player wishes to play against other players.

Channel to actor:

Secondary Actor: Player 2’s client

Channels to secondary actors:

Open issues:



















Use Case: Match with another player

Primary actor:	 Player 1

Goal in context: Player 1 is matched with another player of similar skill level

Preconditions:	User must be logged in, user must have a recorded skill level based on previous multiplayer interactions or games against a computer.

Trigger: On the “Multiplayer” tab, the player clicks the “find opponent” button.

Scenario:
Player clicks on the “Multiplayer” tab.
Player clicks on “find opponent” button.
The system retrieves the player’s skill level from their profile
The matchmaking system searches for a suitable opponent



Exceptions:



Priority: Essential, must be implemented

When available:

Frequency of use: Low-medium. Typically. a user will only have one account and therefore only need to create it once.

Channel to actor: Via OMG gaming platform (internet required)

Secondary Actor: Player 2, matchmaking system

Channels to secondary actors:
Same as channel to primary actor.

Open issues:
What information will be mandatory for a player to enter?



Use Case: Create account

Primary actor:	 Player

Goal in context: Player can create a new account.

Preconditions:	There is an option to create an account in the corner of the screen.

Trigger: Player must click the “Create Account” button

Scenario:
Player clicks the “Create Account” button
The player is asked to enter their full name, user name, phone number, email, birthday and a password twice.
Player presses “Create Account” at the bottom of the screen
Login screen is displayed

Exceptions:
Username is not available. Player will be told to enter a different username.

Priority: Essential, must be implemented

When available:

Frequency of use: Low-medium. Typically. a user will only have one account and therefore only need to create it once.

Channel to actor: Via OMG gaming platform (internet required)

Channels to secondary actors:
N/A

Open issues:
What information will be mandatory for a player to enter






Use Case: Add friend

Primary actor:	 Player 1

Goal in context: Player 1 sends friend request to player 2

Preconditions:	User must be logged in, user must search friend’s username or click on their profile after being matched with them in a game. In general, a player 1 must have clicked on player 2’s profile in order to send a friend request.

Trigger: Player 1 clicks “Send Friend Request”.

Scenario:
Player 1 clicks “Send Friend Request” button
Player 2 receives friend request in their inbox
Player 2 can accept/reject the friend request from player 1
Exceptions:
Username is not available. Player will be told to enter a different username.

Priority: Essential, must be implemented

When available:

Frequency of use: Low-medium. Typically. a user will only have one account and therefore only need to create it once.

Channel to actor: Via OMG gaming platform (internet required)

Secondary Actor: Player 2

Channels to secondary actors:
Same as channel to primary actor.

Open issues:
What information will be mandatory for a player to enter?
